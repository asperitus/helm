apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "nifi.fullname" . }}
  # labels:
  #   app: {{ template "nifi.name" . }}
  #   chart: {{ template "nifi.chart" . }}
  #   release: {{ .Release.Name }}
  #   heritage: {{ .Release.Service }}
spec:
  serviceName: nifi
  replicas: {{ .Values.replicaCount }}
  # selector:
  # matchLabels:
  #   app: {{ template "nifi.name" . }}
  #   release: {{ .Release.Name }}
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "nifi.name" . }}
        release: {{ .Release.Name }}
    spec:
      securityContext:
        runAsUser: 1000
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - nifi
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: {{ .Chart.Name }}
          # image: xemuliam/nifi:1.4.0
          # image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          # imagePullPolicy: {{ .Values.image.pullPolicy }}
          image: apache/nifi:1.7.1
          # command: ["/bin/sh","-c"]
          # args: ["chmod +x /opt/nifi/run.sh; cd /opt/nifi && ./run.sh"]
          # args: ["cd /opt/nifi && /bin/sh ./run.sh"]
          # imagePullPolicy: Always
          ports:
            - containerPort: 8080
            - containerPort: 8081
            - containerPort: 8443
            - containerPort: 2882
          volumeMounts:
            # - name: runconfig
            #   mountPath: /opt/nifi/run.sh
            #   subPath: run.sh
            - name: nifi-repo
              mountPath: /opt/nifi/flowfile_repository
              subPath: flowfilerepository
            - name: nifi-repo
              mountPath: /opt/nifi/database_repository
              subPath: databaserepository
            - name: nifi-repo
              mountPath: /opt/nifi/content_repository
              subPath: contentrepository
            - name: nifi-repo
              mountPath: /opt/nifi/provenance_repository
              subPath: provenancerepository
          env:
          #
            - name: NIFI_CLUSTER_IS_NODE
              value: "true"
            - name: NIFI_CLUSTER_NODE_PROTOCOL_PORT
              value: "8082"
            - name: NIFI_ELECTION_MAX_WAIT
              value: 1 min
            - name: NIFI_WEB_HTTP_PORT
              value: "8080"
            - name: NIFI_ZK_CONNECT_STRING
              value: zookeeper:2181
          #
            # - name: ZK_NODES_LIST
            #   value: "zk-0.zk-hs.zookeeper.svc.cluster.local,zk-1.zk-hs.zookeeper.svc.cluster.local,zk-2.zk-hs.zookeeper.svc.cluster.local"
            # - name: ZK_MONITOR_PORT
            #   value: "2888"
            # - name: IS_CLUSTER_NODE
            #   value: "yes"
            # - name: BANNER_TEXT
            #   value: "Nifi Cluster"
      # volumes:
      # - name: runconfig
      #   configMap:
      #     name: nifi-bootstrap

  volumeClaimTemplates:
    - metadata:
        name: nifi-repo
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 6Gi
  # - metadata:
  #     name: flowfilerepository
  #   spec:
  #     accessModes: [ "ReadWriteOnce" ]
  #     resources:
  #       requests:
  #         storage: 1Gi
  # - metadata:
  #     name: databaserepository
  #   spec:
  #     accessModes: [ "ReadWriteOnce" ]
  #     resources:
  #       requests:
  #         storage: 1Gi
  # - metadata:
  #     name: contentrepository
  #   spec:
  #     accessModes: [ "ReadWriteOnce" ]
  #     resources:
  #       requests:
  #         storage: 1Gi
  # - metadata:
  #     name: provenancerepository
  #   spec:
  #     accessModes: [ "ReadWriteOnce" ]
  #     resources:
  #       requests:
  #         storage: 2Gi
